version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  main-db:
    image: postgres:16.3
    container_name: main-db
    restart: on-failure
    environment:
      POSTGRES_DB: library_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: Europe/Istanbul
    ports:
      - "5432:5432"
    volumes:
      - main-db-data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  log-db:
    image: postgres:16.3
    container_name: log-db
    environment:
      POSTGRES_DB: library_log_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: Europe/Istanbul
    ports:
      - "5433:5432"
    volumes:
      - log-db-data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  library-app:
    build: .
    container_name: library-app
    depends_on:
      main-db:
        condition: service_healthy
      log-db:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      TZ: Europe/Istanbul
      SPRING_APPLICATION_NAME: Library-Management-System
      SERVER_PORT: 8080

      # PRIMARY DB
      SPRING_DATASOURCE_URL: jdbc:postgresql://main-db:5432/library_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

      # LOG DB
      LOG_DATASOURCE_URL: jdbc:postgresql://log-db:5432/library_log_db
      LOG_DATASOURCE_USERNAME: postgres
      LOG_DATASOURCE_PASSWORD: postgres
      LOG_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: library-log-group
      LIBRARY_KAFKA_TOPIC: library-log-topic
      APP_KAFKA_ENABLED: "true"

      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES: "*"

      # Swagger
      SPRINGDOC_API_DOCS_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_ENABLED: "true"
      SPRINGDOC_OVERRIDE_WITH_GENERIC_RESPONSE: "false"
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
    networks:
      - backend

volumes:
  main-db-data:
  log-db-data:

networks:
  backend: